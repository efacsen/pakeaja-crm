name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Quality Gate - Code Analysis
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Type checking (permissive)
        run: npm run type-check || echo "Type check failed but continuing..."
        continue-on-error: true

      - name: Linting
        run: npm run lint || echo "Linting failed but continuing..."
        continue-on-error: true

      - name: Code formatting check
        run: npx prettier --check . || echo "Formatting check failed but continuing..."
        continue-on-error: true

      - name: Security audit
        run: npm audit --audit-level=high --production || echo "Security audit completed with warnings"
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated --depth=0 || true

      - name: Dependency vulnerability scan
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        continue-on-error: true

  # Testing Suite
  test:
    name: Testing Suite
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        test-type: [jest, playwright]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        if: matrix.test-type == 'playwright'
        run: npx playwright install --with-deps

      - name: Run Jest tests
        if: matrix.test-type == 'jest'
        run: npm run test || echo "Jest tests failed but continuing..."
        continue-on-error: true

      - name: Run Playwright tests
        if: matrix.test-type == 'playwright'
        run: npm run test:e2e || echo "Playwright tests failed but continuing..."
        continue-on-error: true
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            playwright-report/
            coverage/
          retention-days: 7

  # Build & Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality]
    outputs:
      build-cache-key: ${{ steps.build-cache.outputs.cache-primary-key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Cache Next.js build
        id: build-cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_USE_SUPABASE: true
          NEXT_PUBLIC_APP_NAME: "PakeAja CRM"
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            out/
          retention-days: 1

  # Security Scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Quality Gate Summary
  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()
    steps:
      - name: Check Quality Gate
        run: |
          echo "Quality Gate Results:"
          echo "- Code Quality: ${{ needs.quality.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Security: ${{ needs.security.result }}"
          
          # Only require build to succeed - allow other failures
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Quality Gate PASSED - Build successful"
            exit 0
          else
            echo "❌ Quality Gate FAILED - Build must succeed"
            exit 1
          fi

      - name: Post Quality Gate status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🎯 Quality Gate Report')
            );
            
            const buildStatus = '${{ needs.build.result }}';
            const overallStatus = buildStatus === 'success' ? 'PASSED' : 'FAILED';
            
            const body = `🎯 **Quality Gate Report**
            
            | Check | Status | Notes |
            |-------|--------|-------|
            | Code Quality | ${{ needs.quality.result }} | Permissive mode |
            | Tests | ${{ needs.test.result }} | Non-blocking |
            | Build | ${{ needs.build.result }} | **Required** |
            | Security | ${{ needs.security.result }} | Advisory only |
            
            **Overall Status: ${overallStatus}** ${overallStatus === 'PASSED' ? '✅' : '❌'}
            
            > **Note**: Pipeline configured for development speed. Build success is the main gate.
            
            ---
            *Updated: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } 