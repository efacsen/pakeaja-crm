name: Deploy to Vercel

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Only deploy if CI passed
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      ci-passed: ${{ steps.check.outputs.result }}
      commit-sha: ${{ steps.check.outputs.commit-sha }}
    steps:
      - name: Check CI workflow result
        id: check
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "❌ CI workflow failed, skipping deployment"
            exit 1
          fi

  # Preview deployment for PRs
  preview:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'horizon-suite/package-lock.json'

      - name: Install dependencies
        working-directory: ./horizon-suite
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        working-directory: ./horizon-suite
        run: npm run build
        env:
          NEXT_PUBLIC_USE_SUPABASE: true
          NEXT_PUBLIC_APP_NAME: "PakeAja CRM (Preview)"
          NEXT_TELEMETRY_DISABLED: 1

      - name: Deploy to Vercel (Preview)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          working-directory: ./horizon-suite
          scope: ${{ env.VERCEL_ORG_ID }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          URL="${{ steps.deploy.outputs.preview-url }}"
          echo "🔍 Health checking: $URL"
          
          for i in {1..10}; do
            if curl -f -s "$URL" > /dev/null; then
              echo "✅ Health check passed"
              break
            fi
            echo "⏳ Attempt $i failed, retrying in 10s..."
            sleep 10
            if [ $i -eq 10 ]; then
              echo "❌ Health check failed after 10 attempts"
              exit 1
            fi
          done

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Preview deployment')
            );
            
            const body = `🚀 **Preview deployment ready!**
            
            ✅ **Preview URL**: ${{ steps.deploy.outputs.preview-url }}
            📊 **Build Status**: Success
            🔍 **Commit**: ${context.sha.substring(0, 7)}
            ⏱️ **Deployed**: ${new Date().toLocaleString()}
            
            **Quick Links:**
            - 🏠 [Dashboard](${{ steps.deploy.outputs.preview-url }}/dashboard)
            - 🧮 [Calculator](${{ steps.deploy.outputs.preview-url }}/dashboard/calculator)
            - 👥 [Customers](${{ steps.deploy.outputs.preview-url }}/dashboard/customers)
            
            ---
            *This preview will be automatically updated when you push new commits.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Staging deployment
  staging:
    name: Staging Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'develop'
    needs: check-ci
    environment:
      name: staging
      url: https://pakeaja-crm-staging.vercel.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'horizon-suite/package-lock.json'

      - name: Install dependencies
        working-directory: ./horizon-suite
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        working-directory: ./horizon-suite
        run: npm run build
        env:
          NEXT_PUBLIC_USE_SUPABASE: true
          NEXT_PUBLIC_APP_NAME: "PakeAja CRM (Staging)"
          NEXT_TELEMETRY_DISABLED: 1

      - name: Deploy to Vercel (Staging)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          working-directory: ./horizon-suite
          scope: ${{ env.VERCEL_ORG_ID }}
          alias: pakeaja-crm-staging

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          URL="https://pakeaja-crm-staging.vercel.app"
          echo "🔍 Health checking: $URL"
          
          for i in {1..10}; do
            if curl -f -s "$URL" > /dev/null; then
              echo "✅ Staging health check passed"
              break
            fi
            echo "⏳ Attempt $i failed, retrying in 10s..."
            sleep 10
            if [ $i -eq 10 ]; then
              echo "❌ Staging health check failed"
              exit 1
            fi
          done

      - name: Run smoke tests
        working-directory: ./horizon-suite
        run: |
          # Install Playwright if not cached
          npx playwright install --with-deps
          
          # Run smoke tests against staging
          PLAYWRIGHT_BASE_URL=https://pakeaja-crm-staging.vercel.app npx playwright test tests/basic-functionality.test.ts
        env:
          CI: true

      - name: Notify staging deployment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ needs.check-ci.outputs.commit-sha }}',
              state: 'success',
              target_url: 'https://pakeaja-crm-staging.vercel.app',
              description: 'Staging deployment successful',
              context: 'deployment/staging'
            });

  # Production deployment
  production:
    name: Production Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main'
    needs: check-ci
    environment:
      name: production
      url: https://pakeaja-crm.vercel.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'horizon-suite/package-lock.json'

      - name: Install dependencies
        working-directory: ./horizon-suite
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        working-directory: ./horizon-suite
        run: npm run build
        env:
          NEXT_PUBLIC_USE_SUPABASE: true
          NEXT_PUBLIC_APP_NAME: "PakeAja CRM"
          NEXT_TELEMETRY_DISABLED: 1

      - name: Deploy to Vercel (Production)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./horizon-suite
          scope: ${{ env.VERCEL_ORG_ID }}

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          URL="https://pakeaja-crm.vercel.app"
          echo "🔍 Health checking: $URL"
          
          for i in {1..10}; do
            if curl -f -s "$URL" > /dev/null; then
              echo "✅ Production health check passed"
              break
            fi
            echo "⏳ Attempt $i failed, retrying in 10s..."
            sleep 10
            if [ $i -eq 10 ]; then
              echo "❌ Production health check failed"
              # Don't exit here - we want to attempt rollback
              echo "HEALTH_CHECK_FAILED=true" >> $GITHUB_ENV
              break
            fi
          done

      - name: Run production smoke tests
        if: env.HEALTH_CHECK_FAILED != 'true'
        working-directory: ./horizon-suite
        run: |
          npx playwright install --with-deps
          PLAYWRIGHT_BASE_URL=https://pakeaja-crm.vercel.app npx playwright test tests/basic-functionality.test.ts
        env:
          CI: true

      - name: Create deployment tag
        if: env.HEALTH_CHECK_FAILED != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TAG_NAME="v$(date +'%Y.%m.%d-%H%M')"
          git tag -a "$TAG_NAME" -m "Production deployment $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin "$TAG_NAME"
          echo "DEPLOYMENT_TAG=$TAG_NAME" >> $GITHUB_ENV

      - name: Rollback on failure
        if: env.HEALTH_CHECK_FAILED == 'true'
        run: |
          echo "🔄 Attempting rollback due to health check failure"
          # Get previous successful deployment
          PREVIOUS_TAG=$(git tag -l "v*" | sort -V | tail -2 | head -1)
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Rolling back to $PREVIOUS_TAG"
            git checkout "$PREVIOUS_TAG"
            # Redeploy previous version
            # This would need additional logic to redeploy
            echo "ROLLBACK_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          fi

      - name: Notify production deployment
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ env.HEALTH_CHECK_FAILED }}' !== 'true';
            const status = success ? 'success' : 'failure';
            const description = success ? 'Production deployment successful' : 'Production deployment failed - rollback initiated';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ needs.check-ci.outputs.commit-sha }}',
              state: status,
              target_url: 'https://pakeaja-crm.vercel.app',
              description: description,
              context: 'deployment/production'
            });

      - name: Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ env.HEALTH_CHECK_FAILED }}' !== 'true';
            const tag = '${{ env.DEPLOYMENT_TAG }}';
            const rollbackTag = '${{ env.ROLLBACK_TAG }}';
            
            let body;
            if (success) {
              body = `🚀 **Production Deployment Successful!**
              
              ✅ **Status**: Deployed successfully
              🏷️ **Version**: ${tag}
              🔗 **URL**: https://pakeaja-crm.vercel.app
              📊 **Commit**: ${{ needs.check-ci.outputs.commit-sha }}
              ⏱️ **Deployed**: ${new Date().toLocaleString()}
              
              **Health Checks**: ✅ All passed
              **Smoke Tests**: ✅ All passed`;
            } else {
              body = `❌ **Production Deployment Failed**
              
              ⚠️ **Status**: Deployment failed health checks
              🔄 **Action**: Rollback initiated
              ${rollbackTag ? `🏷️ **Rolled back to**: ${rollbackTag}` : ''}
              📊 **Failed Commit**: ${{ needs.check-ci.outputs.commit-sha }}
              ⏱️ **Failed at**: ${new Date().toLocaleString()}
              
              **Health Checks**: ❌ Failed
              **Next Steps**: Review logs and fix issues`;
            }
            
            // Create an issue for failed deployments
            if (!success) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Production Deployment Failed - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['deployment', 'production', 'urgent']
              });
            }

  # Post-deployment verification
  verify:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [staging, production]
    if: always() && (needs.staging.result == 'success' || needs.production.result == 'success')
    steps:
      - name: Comprehensive health check
        run: |
          if [ "${{ needs.production.result }}" == "success" ]; then
            URL="https://pakeaja-crm.vercel.app"
            ENV="production"
          else
            URL="https://pakeaja-crm-staging.vercel.app"
            ENV="staging"
          fi
          
          echo "🔍 Comprehensive health check for $ENV: $URL"
          
          # Check main page
          if ! curl -f -s "$URL" > /dev/null; then
            echo "❌ Main page failed"
            exit 1
          fi
          
          # Check login page
          if ! curl -f -s "$URL/login" > /dev/null; then
            echo "❌ Login page failed"
            exit 1
          fi
          
          # Check API health (if available)
          if curl -f -s "$URL/api/health" > /dev/null; then
            echo "✅ API health check passed"
          fi
          
          echo "✅ All health checks passed for $ENV"

      - name: Performance check
        run: |
          URL="https://pakeaja-crm.vercel.app"
          if [ "${{ needs.production.result }}" != "success" ]; then
            URL="https://pakeaja-crm-staging.vercel.app"
          fi
          
          echo "⚡ Performance check for: $URL"
          
          # Simple performance check using curl
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$URL")
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Check if response time is acceptable (< 5 seconds)
          if (( $(echo "$RESPONSE_TIME > 5" | bc -l) )); then
            echo "⚠️ Slow response time: ${RESPONSE_TIME}s"
          else
            echo "✅ Good response time: ${RESPONSE_TIME}s"
          fi

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [preview, staging, production, verify]
    if: always()
    steps:
      - name: Clean up old preview deployments
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          echo "🧹 Cleaning up preview deployments for closed PR"
          # This would integrate with Vercel API to remove old previews
          # For now, we'll just log the action

      - name: Update deployment status
        run: |
          echo "📊 Deployment Summary:"
          echo "- Preview: ${{ needs.preview.result || 'skipped' }}"
          echo "- Staging: ${{ needs.staging.result || 'skipped' }}"
          echo "- Production: ${{ needs.production.result || 'skipped' }}"
          echo "- Verification: ${{ needs.verify.result || 'skipped' }}" 