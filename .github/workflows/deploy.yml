name: Deploy to Vercel

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Only deploy if CI passed or if build succeeded
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      ci-passed: ${{ steps.check.outputs.result }}
      commit-sha: ${{ steps.check.outputs.commit-sha }}
    steps:
      - name: Check CI workflow result
        id: check
        run: |
          echo "CI workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "result=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
          echo "commit-sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT

  # Production deployment
  production:
    name: Production Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main'
    needs: check-ci
    environment:
      name: production
      url: https://pakeaja-crm.vercel.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build:vercel
        env:
          NEXT_PUBLIC_USE_SUPABASE: true
          NEXT_PUBLIC_APP_NAME: "PakeAja CRM"
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Comment deployment status
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ needs.check-ci.outputs.commit-sha }}';
            const deploymentUrl = 'https://pakeaja-crm.vercel.app';
            
            // Get commits for the workflow run
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              per_page: 1
            });
            
            if (commits.length > 0) {
              const commitMessage = commits[0].commit.message.split('\n')[0];
              
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: sha,
                body: `üöÄ **Deployment Successful**
                
                **Environment**: Production
                **URL**: ${deploymentUrl}
                **Commit**: ${commitMessage}
                **Status**: ‚úÖ Live
                
                ---
                *Deployed via GitHub Actions*`
              });
            }

  # Preview deployment for PRs
  preview:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: preview
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build:vercel
        env:
          NEXT_PUBLIC_USE_SUPABASE: true
          NEXT_PUBLIC_APP_NAME: "PakeAja CRM (Preview)"
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        id: vercel-preview
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR with preview
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.vercel-preview.outputs.preview-url }}';
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üéØ Preview Deployment')
            );
            
            const body = `üéØ **Preview Deployment**
            
            **Status**: ‚úÖ Deployed successfully
            **URL**: ${previewUrl}
            **Environment**: Preview
            
            > **Note**: This is a preview deployment. Changes will be reflected automatically.
            
            ---
            *Updated: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Post-deployment cleanup
  cleanup:
    name: Post-Deployment Cleanup
    runs-on: ubuntu-latest
    needs: [production]
    if: always()
    steps:
      - name: Cleanup temporary files
        run: |
          echo "üßπ Cleaning up deployment artifacts..."
          echo "Deployment process completed."
          
          if [ "${{ needs.production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment successful"
          else
            echo "‚ùå Production deployment failed"
          fi
        continue-on-error: true 